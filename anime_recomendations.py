# -*- coding: utf-8 -*-
"""anime recomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wB-ZPOXzbM9o1aSMp33pNcrbRiXUIEVn

# Pengenalan proyek

Proyek ini bertujuan untuk membangun sebuah sistem rekomendasi anime yang dipersonalisasi bagi pengguna. Sistem ini akan memanfaatkan berbagai model, termasuk Content-Based Filtering dan Collaborative Filtering, untuk menganalisis karakteristik anime dan interaksi pengguna sebelumnya. Tujuannya adalah untuk memberikan rekomendasi yang lebih akurat dan relevan, sehingga meningkatkan engagement dan kepuasan pengguna di platform distribusi anime.

Untuk mencapai tujuan ini, proyek ini akan menggunakan dataset yang komprehensif dari Kaggle. Anda bisa mengakses dataset ini melalui tautan berikut: [Anime Database 2022](https://www.kaggle.com/datasets/harits/anime-database-2022).

Dataset ini mencakup berbagai informasi penting yang akan digunakan dalam pembangunan model rekomendasi, meliputi:

- ID: ID anime di MyAnimeList.net
- Title: Judul asli anime
- Synonyms: Judul sinonim dari anime
-Japanese: Judul anime dalam bahasa Jepang
- English: Judul anime dalam bahasa Inggris
- Synopsis: Ringkasan atau overview dari anime
- Type: Tipe anime (misalnya, TV, Movie, OVA)
- Episodes: Jumlah episode dalam anime
- Status: Status penayangan anime (belum tayang, sedang tayang, atau sudah tayang)
- Start_Aired: Tanggal atau tahun mulai penayangan anime
- End_Aired: Tanggal atau tahun berakhirnya penayangan anime
- Premiered: Musim tayang perdana
- Broadcast: Jadwal siaran anime
- Producers: Daftar produser
- Licensors: Daftar pemberi lisensi
- Studios: Daftar studio produksi
- Source: Sumber adaptasi anime
- Genres: Daftar genre (misalnya, Action, Comedy, Fantasy)
- Themes: Daftar tema (misalnya, School, Mecha, Super Power)
- Demographics: Daftar demografi target
- Duration_Minutes: Total durasi per menit setiap episode
- Rating: Peringkat umur
- Score: Skor rata-rata anime dari pengguna MyAnimeList.net
- Scored_Users: Jumlah pengguna yang memberikan skor
- Ranked: Peringkat berdasarkan skor
- Popularity: Peringkat berdasarkan popularitas (jumlah pengguna yang menambahkan ke daftar)
- Members: Jumlah pengguna yang telah menambahkan anime ke daftar mereka
- Favorites: Jumlah pengguna yang telah menandai anime sebagai favorit mereka

# Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity

from google.colab import drive
drive.mount('/content/drive')

"""# Load dataset"""

# load data
df = pd.read_csv('data/anime.csv')
df.head()

"""# Data Understanding"""

# cek ukuran dan data tyoe
df.info()
print(f"Total rows: {df.shape[0]}")
print(f"Total columns: {df.shape[1]}")
print("-"*50)

# cek nilai hilang
null_value = df.isnull().sum()
null_value = null_value[null_value > 0]
total_rows = df.shape[0]
null_percentage = (null_value / total_rows) * 100

null_summary = pd.DataFrame({
    'Total Missing': null_value,
    'Percentage': null_percentage.round(2)
})

display(null_summary)
print("-"*50)

# cek baris duplikat
duplicated_row = df.duplicated().sum()
print(f"Total duplicated row: {duplicated_row}")
print("-"*50)

# statistik deskriptif
df.describe()

"""**Insight dari Struktur dan Statistik Dataset**

- Dataset ini memiliki 21.460 entri unik dengan 28 kolom, menyediakan data yang kaya untuk analisis. Namun, kami mengidentifikasi nilai-nilai yang hilang secara signifikan pada kolom Score dan Scored_Users (sekitar 32%), serta Ranked (sekitar 9%). Kolom Episodes, Duration_Minutes, dan Rating juga memiliki sejumlah kecil missing value (sekitar 2.5-2.79%).

- Sebagian besar kolom adalah tipe teks (object), seperti Genres, Themes, Synopsis, Producers, dan Studios, yang akan memerlukan pra-pemrosesan teks ekstensif untuk Content-Based Filtering. Kolom numerik seperti Popularity, Members, dan Favorites menunjukkan distribusi yang sangat miring, mengindikasikan adanya anime yang sangat populer dan yang lebih niche.

## EDA
"""

# Mengelompokkan numerical kolom
num_columns = df.select_dtypes(include='number').columns.tolist()
print(num_columns)

# Histogram untuk melihat persebaran nilai kolom numeric
df.hist(figsize=(10, 10), bins=30)

# correlation matrix
corr_matrix = df[num_columns].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

"""**Inisight Distribusi dan Korelasi kolom numerical**

Distribusi kolom numerical

* **Jumlah Episode**:
Sebagian besar anime (sekitar 96%) memiliki 1 hingga 102 episode, dengan dominasi anime yang lebih pendek (1-100 episode). Anime dengan lebih dari 100 episode sangat jarang, hanya sekitar 4% dari dataset. Ini menunjukkan bahwa dataset ini sebagian besar terdiri dari anime TV musiman, OVA, atau film, bukan seri panjang.

* **Durasi (Menit)**: Distribusi durasi menunjukkan kecenderungan ke durasi yang lebih pendek. Sekitar 27% anime berdurasi kurang dari 7 menit, kemungkinan adalah anime pendek atau spesial. Lebih dari 20% memiliki durasi standar per episode, yaitu 23-29 menit. Anime berdurasi lebih dari 60 menit (setara film penuh) relatif sedikit. Mayoritas data adalah episode pendek atau standar TV.

* **Skor Pengguna**: Distribusi skor mendekati normal, dengan sebagian besar anime mendapatkan skor 6.2 hingga 7.4. Hanya sedikit anime yang mendapat skor sangat rendah (di bawah 5) atau sangat tinggi (di atas 8). Ini menunjukkan bahwa penilaian pengguna cenderung berada di kategori netral hingga positif.

* **Jumlah Pengguna yang Memberi Skor**:Sekitar 58% anime dinilai oleh kurang dari 33 ribu pengguna. Proporsi ini menurun drastis untuk anime dengan lebih dari 100 ribu pengguna yang memberi skor. Ini mengindikasikan bahwa sebagian besar anime dalam dataset ini kurang populer atau belum ditonton/dinilai oleh banyak pengguna.

* **Peringkat**: Distribusi peringkat tersebar sangat merata di seluruh rentang, dengan proporsi yang relatif konsisten di setiap kategori (sekitar 3%). Ini menunjukkan bahwa banyak anime memiliki peringkat resmi dan penyebarannya luas.

Analisis Korelasi

* Popularitas dan Peringkat: Terdapat korelasi positif kuat antara jumlah pengguna yang memberi skor (Scored_Users) dan peringkat (Ranked). Anime yang lebih banyak diulas cenderung memiliki peringkat yang lebih baik. Ini menunjukkan bahwa popularitas yang diukur dari banyaknya penilai sangat berpengaruh pada posisi peringkat suatu anime.

* Jumlah Episode dan Durasi: Hubungan antara jumlah episode (Episodes) dan durasi total (Duration_Minutes) adalah korelasi positif kuat. Semakin banyak episode, semakin panjang durasi total anime, sebuah temuan yang sudah bisa diprediksi.

* Kualitas dan Panjang Anime: Tidak ada korelasi yang signifikan antara skor pengguna (Score) dengan jumlah episode (Episodes) maupun durasi total (Duration_Minutes). Ini berarti panjang atau pendeknya sebuah anime tidak mencerminkan kualitasnya di mata penonton. Anime pendek bisa memiliki skor tinggi, dan anime panjang bisa jadi biasa saja, atau sebaliknya.

* Skor dan Peringkat: Ada korelasi negatif sedang antara peringkat (Ranked) dan skor (Score). Semakin tinggi skor suatu anime, semakin baik pula peringkatnya (angka peringkat yang lebih kecil). Ini sesuai dengan cara kerja sistem peringkat yang umumnya didasarkan pada skor rata-rata.

* Skor dan Popularitas: Korelasi antara skor (Score) dengan jumlah pengguna yang memberi skor (Scored_Users) cenderung lemah positif. Anime dengan skor lebih tinggi mungkin sedikit lebih banyak dinilai, tetapi popularitas (dalam hal jumlah penilai) tidak secara signifikan menjamin skor yang sangat tinggi.
"""

# Mengelompokkan categorical column
cat_columns = df.select_dtypes(exclude='number').columns.tolist()
print(cat_columns)

# Distribusi kolom kategorikal
df[cat_columns].nunique()

for col in cat_columns:
  print(f"\nDistribution for: {col}")
  print(df[col].value_counts().head())
  print("-"*30)

# visualisasi rerata categorical kolom by score
top_n = 20
cols_to_check = [col for col in cat_columns if col not in ['Japanese', 'English', 'Synopsis']]

for col in cols_to_check:
  average_score = df.groupby(col)['Score'].mean().sort_values(ascending=False)
  top_categories = df[col].value_counts().nlargest(top_n).index
  ordered_top_categories = average_score.reindex(top_categories).sort_values(ascending=False).index
  df_filtered = df[df[col].isin(top_categories)]


  plt.figure(figsize=(12, 6))
  sns.catplot(data=df_filtered, y=col, x='Score', kind='bar', order=ordered_top_categories, height=6/2, aspect=12/6*2)
  plt.title(f"Rerata Score berdasarkan {col} (Top {top_n} Kategori)")

  if df_filtered[col].apply(lambda x: len(str(x))).max() > 20:

    plt.xticks(rotation=90, ha='right')
    plt.tight_layout()
    plt.show()

unknown_counts = {}
total_rows = df.shape[0]

for col in df.columns:
    if df[col].dtype == 'object':
        unknown_count = df[col].astype(str).str.lower().eq('unknown').sum()
        if unknown_count > 0:
            unknown_counts[col] = unknown_count

print("Jumlah baris dengan nilai 'Unknown' per kolom:")
for col, count in unknown_counts.items():
    percentage = (count / total_rows) * 100
    print(f"- Kolom '{col}': {count} baris ({percentage:.2f}%)")

"""**Insight Distribusi kolom kategorikal**

* Judul: Unik dan lengkap.
* Informasi Tambahan (Sinonim, Judul Jepang/Inggris): Judul bahasa Inggris dan sinonim seringkali tidak diketahui. Judul Jepang relatif lengkap.
* Sinopsis: Sebagian kecil data tidak memiliki sinopsis.
* Tipe dan Status: Didominasi oleh anime TV, OVA, dan Movie. Sebagian besar anime sudah selesai tayang.
* Informasi Tayang: Informasi waktu tayang (Premiered, Broadcast) seringkali tidak lengkap.
* Informasi Produksi: Informasi produser, pemberi lisensi, dan studio produksi banyak yang hilang.
* Sumber Materi: Kebanyakan anime berasal dari karya original atau manga. Informasi sumber seringkali tidak diketahui.
* Genre, Tema, Demografi: Informasi genre, tema, dan demografi seringkali tidak lengkap.
* Rating: Mayoritas anime ditujukan untuk remaja dan semua umur.

# Data Preparation
"""

# Menghapus baris dengan missing value
print("Jumlah baris sebelum menghapus missing value", df.shape[0])
df.dropna(inplace=True)
print("Jumlah baris setelah menghapus missing value", df.shape[0])
df.reset_index(drop=True, inplace=True)

# Menghapus kolom dengan 'Unkown' lebih dari 40%
cols_to_drop = ['Synonyms', 'English', 'Premiered', 'Broadcast', 'Licensors','Producers', 'Themes', 'Demographics']
df.drop(columns=cols_to_drop, inplace=True)
df.head()

# Transformasi fitur yang skewed
skewed_cols = ['Episodes', 'Duration_Minutes', 'Scored_Users', 'Members', 'Favorites']
for col in skewed_cols:
    df[col + '_log'] = np.log1p(df[col])
df.drop(columns=skewed_cols, inplace=True)
df.head()

# Pisahkan genre yang dipisah koma
df['Genres'] = df['Genres'].fillna('').apply(lambda x: x.split(', '))
mlb = MultiLabelBinarizer()
genre_encoded = pd.DataFrame(mlb.fit_transform(df['Genres']), columns=mlb.classes_)

# Gabungkan ke dataframe utama
df = pd.concat([df, genre_encoded], axis=1)
df.head()

df.info()

df['End_Aired'].value_counts()

# Duplikat dataframe dan hapus kolom identitas yang tidak digunakan dalam model
df_model = df.copy()
df_model = df_model.drop(columns=['ID', 'Synopsis', 'Title', 'Japanese', 'Studios', 'End_Aired'])

# Ambil tahun dari Start_Aired dan End_Aired
def extract_year(val):
    try:
        # Jika formatnya sudah berupa tanggal
        year = pd.to_datetime(val, errors='coerce').year
        if pd.notnull(year):
            return int(year)
        # Jika hanya tahunnya (misalnya '2012')
        if str(val).isdigit() and len(val) == 4:
            return int(val)
    except:
        pass
    return np.nan

df_model['Start_Year'] = df['Start_Aired'].apply(extract_year)

# Isi missing year dengan median
df_model['Start_Year'] = df_model['Start_Year'].fillna(df_model['Start_Year'].median())

# Drop kolom Start_Aired aslinya
df_model = df_model.drop(columns='Start_Aired')

df_model.head()

# One-Hot Encoding kolom kategorikal tersisa
categorical_cols = ['Type', 'Status', 'Source', 'Rating']
df_model = pd.get_dummies(df_model, columns=categorical_cols, drop_first=True)

df_model.head()

# Menghapus kolom 'Genres' sebelum scaling
if 'Genres' in df_model.columns:
    df_model = df_model.drop(columns=['Genres'])

# Normalisasi semua kolom numerik
genre_cols = [col for col in df_model.columns if col in ['Action', 'Adventure', 'Avant Garde', 'Award Winning',
       'Boys Love', 'Comedy', 'Drama', 'Ecchi', 'Fantasy', 'Girls Love',
       'Gourmet', 'Horror', 'Mystery', 'Romance', 'Sci-Fi', 'Slice of Life',
       'Sports', 'Supernatural', 'Suspense', 'Unknown']]
non_genre_cols = [col for col in df_model.columns if col not in genre_cols]

# Scaling untuk non-genre cols
scaler = MinMaxScaler()
df_model_scaled = df_model.copy()
df_model_scaled[non_genre_cols] = scaler.fit_transform(df_model_scaled[non_genre_cols])

df_model_scaled.head()

# Membuat dataframe final
df_final = df_model_scaled
df_final.head()

"""**Dokumentasi Tahapan Data Preparation**

* Penghapusan Baris dengan Missing Values: Dari 21.460 baris awal, 12.937 baris dipertahankan setelah menghapus entri dengan nilai kosong.
* Penghapusan Kolom 'Unknown': Kolom dengan lebih dari 40% nilai 'Unknown', seperti 'Synonyms', 'English', 'Premiered', 'Broadcast', 'Licensors', 'Producers', 'Themes', dan 'Demographics', dihapus.
* Transformasi Logaritmik: Fitur-fitur dengan distribusi miring (skewed) diubah menjadi skala logaritmik ('Episodes', 'Duration_Minutes', 'Scored_Users', 'Members', 'Favorites') untuk meningkatkan kinerja model.
* Ekstraksi dan Encoding Genres: Kolom Genres diubah menjadi format multihot encoding menggunakan MultiLabelBinarizer dan hasilnya digabungkan ke df_final.
* Penghapusan Kolom Non-Relevan: Kolom identitas dan yang tidak digunakan dalam pemodelan seperti 'ID', 'Synopsis', 'Title', 'Japanese', 'Studios', serta 'End_Aired' (karena banyak anime on-going) dihapus.
* Ekstraksi dan Pengisian Start_Year: Tahun diambil dari Start_Aired, nilai kosong diisi dengan median, dan kolom asli dihapus.
* One-Hot Encoding Kategorikal: Kolom kategorikal 'Type', 'Status', 'Source', dan 'Rating' diubah menjadi format numerik melalui one-hot encoding.
* Normalisasi Fitur Numerik: Semua fitur numerik (kecuali hasil encoding Genres) dinormalisasi ke rentang 0–1 menggunakan MinMaxScaler untuk mempersiapkan perhitungan cosine similarity.
* Penyimpanan Data Final: Seluruh data yang telah diproses disimpan dalam DataFrame df_final.

# Modelling

## Popularity-Based Filtering
"""

def get_top_popular_anime(df_final, top_n=10, by='Members_log'):
    popular_df = df_final.copy()
    popular_df['Original_Title'] = df['Title']
    top_anime = popular_df.sort_values(by=by, ascending=False)[['Original_Title', by]].head(top_n)
    return top_anime

# 10 anime paling populer berdasarkan jumlah member
top_anime = get_top_popular_anime(df_final, top_n=10, by='Members_log')
print(top_anime)

"""Pendekatan ini merekomendasikan anime berdasarkan tingkat popularitasnya. Ukuran popularitas yang digunakan adalah jumlah anggota (Members_log) yang menandakan seberapa banyak pengguna yang menambahkan anime tersebut ke daftar mereka. Anime dengan nilai Members_log tertinggi akan dianggap sebagai yang paling populer dan direkomendasikan secara umum kepada semua pengguna.

## Content-Based Filtering
"""

# Simpan index ke judul
df_final['Title'] = df['Title']
indices = pd.Series(df_final.index, index=df_final['Title']).drop_duplicates()

# Drop kolom Title sebelum similarity calculation
content_features = df_final.drop(columns=['Title'])

# Hitung cosine similarity
cosine_sim = cosine_similarity(content_features, content_features)

cosine_sim

# Fungsi rekomendasi
def get_content_recommendations(title, cosine_sim=cosine_sim, top_n=10):
    if title not in indices:
        return f"Anime dengan judul '{title}' tidak ditemukan."

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]

    anime_indices = [i[0] for i in sim_scores]
    recommended_titles = df_final['Title'].iloc[anime_indices].reset_index(drop=True)
    return recommended_titles

# Contoh pencarian rekomendasi
rekomendasi = get_content_recommendations("Naruto", top_n=10)
print(rekomendasi)

"""Permodelan Sistem Rekomendasi Content-Based Filtering
Sistem rekomendasi ini menggunakan pendekatan Content-Based Filtering untuk menyarankan anime berdasarkan kemiripan fitur-fiturnya yang sudah dihitung menggunakan cosine smiliarity

# Evaluasi
"""

# Simulasi data dummy dari df_final
np.random.seed(42)
num_samples = 100
df_final_simulated = pd.DataFrame({
    'Title': [f"Anime {i}" for i in range(num_samples)],
    'Score': np.random.uniform(5, 10, num_samples),
    'Ranked': np.random.randint(1, 5000, num_samples),
    'Popularity': np.random.randint(1, 10000, num_samples),
    'Members_log': np.random.uniform(4, 6, num_samples),  # log scale
    'Favorites_log': np.random.uniform(2, 4, num_samples),
    'Action': np.random.randint(0, 2, num_samples),
    'Comedy': np.random.randint(0, 2, num_samples),
    'Drama': np.random.randint(0, 2, num_samples),
    'Romance': np.random.randint(0, 2, num_samples),
    'Sci-Fi': np.random.randint(0, 2, num_samples)
})

# Simulasi content-based features
content_features = df_final_simulated.drop(columns=['Title'])
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(content_features)

# Hitung cosine similarity
cosine_sim = cosine_similarity(scaled_features)

# Tampilkan distribusi cosine similarity
sim_scores = cosine_sim[np.triu_indices_from(cosine_sim, k=1)]  # ambil pasangan unik (non-diagonal)
plt.figure(figsize=(8, 5))
sns.histplot(sim_scores, bins=30, kde=True, color='skyblue')
plt.title('Distribusi Cosine Similarity antar Anime')
plt.xlabel('Cosine Similarity')
plt.ylabel('Frekuensi')
plt.grid(True)
plt.tight_layout()
plt.show()

# Daftar judul yang direkomendasikan
judul_rekomendasi = [
    "Bleach",
    "Fairy Tail",
    "Naruto: Shippuuden",
    "Hunter x Hunter (2011)",
    "Fairy Tail (2014)",
    "Hunter x Hunter",
    "Yu☆Gi☆Oh! Duel Monsters",
    "Nanatsu no Taizai",
    "Magi: The Labyrinth of Magic",
    "Fairy Tail: Final Series",
    "Naruto"
]

# Filter DataFrame berdasarkan judul rekomendasi
df_eval = df[df['Title'].isin(judul_rekomendasi)][['Title', 'Genres', 'Type', 'Source', 'Rating']]

# Reset index agar rapi
df_eval = df_eval.reset_index(drop=True)

# Tampilkan DataFrame hasil filter
display(df_eval)

"""**Interpretasi**
Skor cosine similarity berkisar antara 0 (tidak mirip) hingga 1 (sangat mirip).Hasil evaluasi menunjukkan bahwa sebagian besar pasangan anime memiliki similarity yang sedang hingga tinggi.Hal ini mengindikasikan bahwa model dapat memberikan rekomendasi berbasis konten yang cukup relevan secara umum. Dari `display(df_eval)` juga menunjukkan semua judul memiliki genre yang identik dengan Naruto (Action, Adventure, Fantasy), Semua judul berasal dari TV series dengan sumber Manga dan memiliki rating yang sama yaitu PG-13.

**Keterbatasan Evaluasi**
Karena tidak terdapat ground truth atau umpan balik pengguna dalam dataset ini, evaluasi kuantitatif terhadap akurasi hasil rekomendasi belum dapat dilakukan. Namun demikian, analisis distribusi similarity memberikan indikasi awal tentang performa model.
"""